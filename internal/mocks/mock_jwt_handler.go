// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rshafikov/gophermart/internal/core/security (interfaces: JWTHandler)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_jwt_handler.go -package=mocks github.com/rshafikov/gophermart/internal/core/security JWTHandler
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	security "github.com/rshafikov/gophermart/internal/core/security"
	gomock "go.uber.org/mock/gomock"
)

// MockJWTHandler is a mock of JWTHandler interface.
type MockJWTHandler struct {
	ctrl     *gomock.Controller
	recorder *MockJWTHandlerMockRecorder
	isgomock struct{}
}

// MockJWTHandlerMockRecorder is the mock recorder for MockJWTHandler.
type MockJWTHandlerMockRecorder struct {
	mock *MockJWTHandler
}

// NewMockJWTHandler creates a new mock instance.
func NewMockJWTHandler(ctrl *gomock.Controller) *MockJWTHandler {
	mock := &MockJWTHandler{ctrl: ctrl}
	mock.recorder = &MockJWTHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTHandler) EXPECT() *MockJWTHandlerMockRecorder {
	return m.recorder
}

// GenerateJWT mocks base method.
func (m *MockJWTHandler) GenerateJWT(login string) (*security.JWTToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWT", login)
	ret0, _ := ret[0].(*security.JWTToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJWT indicates an expected call of GenerateJWT.
func (mr *MockJWTHandlerMockRecorder) GenerateJWT(login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWT", reflect.TypeOf((*MockJWTHandler)(nil).GenerateJWT), login)
}

// ParseJWT mocks base method.
func (m *MockJWTHandler) ParseJWT(tokenString string) (*security.TokenPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseJWT", tokenString)
	ret0, _ := ret[0].(*security.TokenPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseJWT indicates an expected call of ParseJWT.
func (mr *MockJWTHandlerMockRecorder) ParseJWT(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJWT", reflect.TypeOf((*MockJWTHandler)(nil).ParseJWT), tokenString)
}
